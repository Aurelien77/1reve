{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aurel\\\\Desktop\\\\web2.0\\\\TRAVAIL-SITE-WEB\\\\REVES\\\\Reves_pour_site_en_ligne\\\\frontend\\\\src\\\\pages\\\\Post2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../helpers/AuthContext\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = Yup.object().shape({\n  commentaire: Yup.string().required(\"Vous devez entrer un titre\"),\n  postText: Yup.string().min(8).max(60000).required(\"Vous devez entrer du texte\"),\n  lien: Yup.string().notRequired(\"Vous pouvez poster sans insÃ©rer de lien\")\n});\nconst initialValues = {\n  commentaire: \"\"\n};\n\nfunction Post2() {\n  _s();\n\n  let {\n    id\n  } = useParams();\n  const [postObject, setPostObject] = useState({});\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState(\"\");\n  const {\n    authState\n  } = useContext(AuthContext);\n  let history = useHistory();\n  useEffect(() => {\n    axios.get(`https://reves7.herokuapp.com/postspriv/byId2/${id}`).then(response => {\n      setPostObject(response.data);\n      /*  Set l'authState avec un post choisit par ID */\n    });\n    axios.get(`https://reves7.herokuapp.com/comments2/${id}`).then(response => {\n      setComments(response.data);\n    });\n  }, []);\n\n  const addComment = () => {\n    axios.post(\"https://reves7.herokuapp.com/comments2\", {\n      commentBody: newComment,\n      Posts2Id: id\n    }, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(response => {\n      if (response.data.error) {\n        console.log(response.data.error);\n      } else {\n        const commentToAdd = {\n          commentBody: newComment,\n          username: response.data.username\n        };\n        setComments([...comments, commentToAdd]);\n        setNewComment(\"\");\n      }\n    });\n  };\n\n  const deleteComment = id => {\n    axios.delete(`https://reves7.herokuapp.com/comments2/${id}`, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(() => {\n      setComments(comments.filter(val => {\n        return val.id !== id;\n      }));\n    });\n  };\n\n  const deletePost = id => {\n    axios.delete(`https://reves7.herokuapp.com/postspriv/${id}`, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(() => {\n      history.push(\"/Home\");\n    });\n  };\n\n  const editPost = option => {\n    if (option === \"title\") {\n      let newTitle = prompt(\"Entrer un nouveau titre:\", \"Mon nouveau titre \");\n\n      if (newTitle === null) {\n        return;\n      }\n\n      axios.put(\"https://reves7.herokuapp.com/postspriv/title\", {\n        newTitle: newTitle,\n        id: id\n      }, {\n        headers: {\n          accessToken: localStorage.getItem(\"accessToken\")\n        }\n      });\n      setPostObject({ ...postObject,\n        title: newTitle\n      });\n    } else {\n      let newPostText = prompt(\"Entrer un nouveau texte:\", \"Mon nouveau texte \");\n\n      if (newPostText === null) {\n        return;\n      }\n\n      axios.put(\"https://reves7.herokuapp.com/postspriv/postText\", {\n        newText: newPostText,\n        id: id\n      }, {\n        headers: {\n          accessToken: localStorage.getItem(\"accessToken\")\n        }\n      });\n      setPostObject({ ...postObject,\n        postText: newPostText\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"indivi\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post2\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        onClick: () => {\n          if (authState.username === postObject.username) {\n            editPost(\"title\");\n          }\n        },\n        children: postObject.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body\",\n        onClick: () => {\n          if (authState.username === postObject.username) {\n            editPost(\"body\");\n          }\n        },\n        children: [postObject.postText, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lien\",\n          children: [/*#__PURE__*/_jsxDEV(\"iframe\", {\n            height: \"500px\",\n            width: \"100%\",\n            src: postObject.lien,\n            frameBorder: \"0\",\n            allow: \"autoplay; encrypted-media\",\n            allowFullScreen: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"blank\",\n            href: postObject.lien,\n            children: postObject.lien\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer\",\n        children: [postObject.username, \"  le   \", new Intl.DateTimeFormat('local').format(value.createAt), (authState.username === postObject.username || authState.admin === true) && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            deletePost(postObject.id);\n          },\n          children: [\" \", \"Supprimer le Post\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"addCommentContainer\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialValues,\n        onClic: addComment,\n        validationSchema: validationSchema,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          className: \"formcommentaire\",\n          id: \"commentaire\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            component: \"textarea\",\n            rows: \"8\",\n            cols: \"45\",\n            autocomplete: \"off\",\n            id: \"comment\",\n            name: \"commentaire\",\n            placeholder: \"(Ex. Tr\\xE8s sympa !...)\",\n            value: newComment,\n            onChange: event => {\n              setNewComment(event.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"boutoncommentaire\",\n            onClick: addComment,\n            children: [\" \", \"Ajouter un commentaire\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"listOfComments\",\n      children: comments.map((comment, key) => {\n        //Map argument de tableau\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment\",\n          children: [comment.commentBody, /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"white\",\n            children: [\" Post\\xE9 par \", comment.username]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 17\n          }, this), (authState.username === comment.username || authState.admin === true) && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              deleteComment(comment.id);\n            },\n            children: \"Suppprimer X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 19\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Post2, \"CXbvkMaogpoT8Q9VFd6tUCx+sQk=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Post2;\nexport default Post2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post2\");","map":{"version":3,"sources":["C:/Users/aurel/Desktop/web2.0/TRAVAIL-SITE-WEB/REVES/Reves_pour_site_en_ligne/frontend/src/pages/Post2.js"],"names":["React","useEffect","useState","useContext","useParams","useHistory","axios","AuthContext","Formik","Form","Field","Yup","validationSchema","object","shape","commentaire","string","required","postText","min","max","lien","notRequired","initialValues","Post2","id","postObject","setPostObject","comments","setComments","newComment","setNewComment","authState","history","get","then","response","data","addComment","post","commentBody","Posts2Id","headers","accessToken","localStorage","getItem","error","console","log","commentToAdd","username","deleteComment","delete","filter","val","deletePost","push","editPost","option","newTitle","prompt","put","title","newPostText","newText","Intl","DateTimeFormat","format","value","createAt","admin","event","target","map","comment","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { AuthContext } from \"../helpers/AuthContext\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  commentaire: Yup.string().required(\"Vous devez entrer un titre\"),\r\n  postText: Yup.string()\r\n    .min(8)\r\n    .max(60000)\r\n    .required(\"Vous devez entrer du texte\"),\r\n  lien: Yup.string().notRequired(\"Vous pouvez poster sans insÃ©rer de lien\"),\r\n});\r\nconst initialValues = {\r\n  commentaire: \"\",\r\n};\r\n\r\nfunction Post2() {\r\n  let { id } = useParams();\r\n  const [postObject, setPostObject] = useState({});\r\n  const [comments, setComments] = useState([]);\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const { authState } = useContext(AuthContext);\r\n\r\n  let history = useHistory();\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://reves7.herokuapp.com/postspriv/byId2/${id}`)\r\n      .then((response) => {\r\n        setPostObject(response.data);           /*  Set l'authState avec un post choisit par ID */\r\n      });\r\n\r\n    axios\r\n      .get(`https://reves7.herokuapp.com/comments2/${id}`)\r\n      .then((response) => {\r\n        setComments(response.data);\r\n      });\r\n  }, []);\r\n\r\n  const addComment = () => {\r\n    axios\r\n      .post(\r\n        \"https://reves7.herokuapp.com/comments2\",\r\n        {\r\n          commentBody: newComment,\r\n          Posts2Id: id,\r\n        },\r\n        {\r\n          headers: {\r\n            accessToken: localStorage.getItem(\"accessToken\"),\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response.data.error) {\r\n          console.log(response.data.error);\r\n        } else {\r\n          const commentToAdd = {\r\n            commentBody: newComment,\r\n            username: response.data.username,\r\n          };\r\n          setComments([...comments, commentToAdd]);\r\n          setNewComment(\"\");\r\n        }\r\n      });\r\n  };\r\n\r\n  const deleteComment = (id) => {\r\n    axios\r\n      .delete(`https://reves7.herokuapp.com/comments2/${id}`, {\r\n        headers: { accessToken: localStorage.getItem(\"accessToken\") },\r\n      })\r\n      .then(() => {\r\n        setComments(\r\n          comments.filter((val) => {\r\n            return val.id !== id;\r\n          })\r\n        );\r\n      });\r\n  };\r\n\r\n  const deletePost = (id) => {\r\n    axios\r\n      .delete(`https://reves7.herokuapp.com/postspriv/${id}`, {\r\n        headers: { accessToken: localStorage.getItem(\"accessToken\") },\r\n      })\r\n      .then(() => {\r\n        history.push(\"/Home\");\r\n      });\r\n  };\r\n\r\n  const editPost = (option) => {\r\n    if (option === \"title\") {\r\n      let newTitle = prompt(\"Entrer un nouveau titre:\", \"Mon nouveau titre \");\r\n      if (newTitle  === null) {\r\n        return;\r\n    }\r\n      axios.put(\r\n        \"https://reves7.herokuapp.com/postspriv/title\",\r\n        {\r\n          newTitle: newTitle,\r\n          id: id,\r\n        },\r\n        {\r\n          headers: { accessToken: localStorage.getItem(\"accessToken\") },\r\n        }\r\n      );\r\n\r\n      setPostObject({ ...postObject, title: newTitle });\r\n    } else {\r\n      let newPostText = prompt(\"Entrer un nouveau texte:\", \"Mon nouveau texte \" );\r\n      if (newPostText  === null) {\r\n        return;\r\n    }\r\n      axios.put(\r\n        \"https://reves7.herokuapp.com/postspriv/postText\",\r\n        {\r\n          newText: newPostText,\r\n          id: id,\r\n        },\r\n        {\r\n          headers: { accessToken: localStorage.getItem(\"accessToken\") },\r\n        }\r\n      );\r\n\r\n      setPostObject({ ...postObject, postText: newPostText });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"indivi\">\r\n      \r\n<div className=\"post2\">\r\n          <div  className=\"title\"\r\n            onClick={() => {\r\n              if (authState.username === postObject.username) {\r\n                editPost(\"title\");\r\n              }\r\n            }}\r\n          >\r\n            {postObject.title}\r\n          </div>\r\n          <div className=\"body\"\r\n            onClick={() => {\r\n              if (authState.username === postObject.username) {\r\n                editPost(\"body\");\r\n              }\r\n            }}\r\n          >\r\n            {postObject.postText}\r\n\r\n            <div className=\"lien\">\r\n              <iframe\r\n                height=\"500px\"\r\n                width=\"100%\"\r\n                src={postObject.lien}\r\n                frameBorder=\"0\"\r\n                allow=\"autoplay; encrypted-media\"\r\n                allowFullScreen\r\n              />\r\n              <a target=\"blank\" href={postObject.lien}>\r\n                {postObject.lien}\r\n              </a>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"footer\">\r\n            {postObject.username}  le   {new Intl.DateTimeFormat('local').format(value.createAt)}\r\n\r\n            {(authState.username === postObject.username ||\r\n              authState.admin === true) && (\r\n              <button\r\n                onClick={() => {\r\n                  deletePost(postObject.id);\r\n                }}\r\n              >\r\n                {\" \"}\r\n                Supprimer le Post\r\n              </button>\r\n            )}\r\n          </div>\r\n        \r\n      </div>\r\n\r\n\r\n      \r\n     \r\n        <div className=\"addCommentContainer\">\r\n          <Formik\r\n            initialValues={initialValues}\r\n            onClic={addComment}\r\n            validationSchema={validationSchema}\r\n          >\r\n            <Form className=\"formcommentaire\" id=\"commentaire\">\r\n              <label></label>\r\n              {/*    <ErrorMessage name=\"commentaire\" component=\"span\" /> */}\r\n\r\n              <Field\r\n                component=\"textarea\"\r\n                rows=\"8\"\r\n                cols=\"45\"\r\n                autocomplete=\"off\"\r\n                id=\"comment\"\r\n                name=\"commentaire\"\r\n                placeholder=\"(Ex. TrÃ¨s sympa !...)\"\r\n                value={newComment}\r\n                onChange={(event) => {\r\n                  setNewComment(event.target.value);\r\n                }}\r\n              />\r\n              <button className=\"boutoncommentaire\" onClick={addComment}>\r\n                {\" \"}\r\n                Ajouter un commentaire\r\n              </button>\r\n            </Form>\r\n          </Formik>\r\n        </div>\r\n\r\n        \r\n        <div className=\"listOfComments\">\r\n          {comments.map((comment, key) => {\r\n            //Map argument de tableau\r\n            return (\r\n\r\n\r\n\r\n              <div key={key} className=\"comment\">\r\n                {comment.commentBody}\r\n\r\n                <label className=\"white\"> PostÃ© par {comment.username}</label>\r\n                {(authState.username === comment.username ||\r\n                  authState.admin === true) && (\r\n                  <button\r\n                    onClick={() => {\r\n                      deleteComment(comment.id);\r\n                    }}\r\n                  >\r\n                    Suppprimer X\r\n                  </button>\r\n                )}\r\n              </div>\r\n\r\n\r\n\r\n            );\r\n          })\r\n          \r\n          }\r\n        </div></div>\r\n\r\n    \r\n  );\r\n}\r\n\r\nexport default Post2;\r\n"]},"metadata":{},"sourceType":"module"}